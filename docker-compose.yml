version: '3.8'

services:
  # Infrastructure Services
  postgres-main:
    image: postgres:14-alpine
    container_name: postgres-main
    environment:
      POSTGRES_DB: jb_main
      POSTGRES_USER: jb_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-jb_password}
    volumes:
      - postgres-main-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jb_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jb-network

  postgres-ai:
    image: postgres:14-alpine
    container_name: postgres-ai
    environment:
      POSTGRES_DB: jb_ai
      POSTGRES_USER: jb_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-jb_password}
    volumes:
      - postgres-ai-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jb_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jb-network

  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jb-network

  # Service Discovery
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - jb-network

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_URI: http://eureka-server:8761/eureka
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      JWT_JWK_URI: http://keycloak:8080/auth/realms/jb-platform/protocol/openid-connect/certs
    depends_on:
      - eureka-server
      - redis
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - jb-network

  # Main API Server
  main-api-server:
    build:
      context: ./main-api-server
      dockerfile: Dockerfile
    container_name: main-api-server
    ports:
      - "8081:8081"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_URI: http://eureka-server:8761/eureka
      DB_HOST: postgres-main
      DB_PORT: 5432
      DB_NAME: jb_main
      DB_USER: jb_user
      DB_PASSWORD: ${DB_PASSWORD:-jb_password}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
    depends_on:
      postgres-main:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - jb-network

  # AI Analysis Server
  ai-analysis-server:
    build:
      context: ./ai-analysis-server
      dockerfile: Dockerfile
    container_name: ai-analysis-server
    ports:
      - "8082:8082"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      EUREKA_URI: http://eureka-server:8761/eureka
      DB_HOST: postgres-ai
      DB_PORT: 5432
      DB_NAME: jb_ai
      DB_USER: jb_user
      DB_PASSWORD: ${DB_PASSWORD:-jb_password}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
    depends_on:
      postgres-ai:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - jb-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - jb-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - jb-network

  # ELK Stack for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - jb-network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.9
    container_name: logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - jb-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.9
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - jb-network

  # Authentication Service (Keycloak)
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD:-admin}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-main:5432/keycloak
      KC_DB_USERNAME: jb_user
      KC_DB_PASSWORD: ${DB_PASSWORD:-jb_password}
    ports:
      - "8180:8080"
    command: start-dev
    depends_on:
      postgres-main:
        condition: service_healthy
    networks:
      - jb-network

volumes:
  postgres-main-data:
  postgres-ai-data:
  redis-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:

networks:
  jb-network:
    driver: bridge
