# Docker Compose 설정 파일
# Kafka와 Zookeeper를 위한 개발 환경 구성
services:
  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - jeonbuk_net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: [ "CMD", "zkServer.sh", "status" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  kafka:
    image: bitnami/kafka:3.4
    container_name: kafka
    ports:
      - "9092:9092"

    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      # Zookeeper 모드 설정
      KAFKA_CFG_ZOOKEEPER_CONNECT: 'zookeeper:2181'

      # KRaft 모드 완전 비활성화


      # 브로커 설정
      KAFKA_CFG_BROKER_ID: '1'

      # 리스너 설정: INTERNAL은 Docker 내부 통신용, EXTERNAL은 호스트 머신에서 접속용
      KAFKA_CFG_LISTENERS: INTERNAL://:29092,EXTERNAL_PLAINTEXT://:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:29092,EXTERNAL_PLAINTEXT://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL_PLAINTEXT:PLAINTEXT
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL

      # 복제 및 트랜잭션 설정 (단일 노드 환경)
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: '1'
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: '1'

      # 성능 최적화 설정
      KAFKA_CFG_NUM_NETWORK_THREADS: '8'
      KAFKA_CFG_NUM_IO_THREADS: '8'
      KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES: '102400'
      KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES: '102400'
      KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES: '104857600'

      # PLAINTEXT 리스너 허용 (개발 환경용)
      ALLOW_PLAINTEXT_LISTENER: 'yes'

      # 자동 토픽 생성 활성화
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: 'true'

      # 로그 보존 설정
      KAFKA_CFG_LOG_RETENTION_HOURS: '168' # 7일
      KAFKA_CFG_LOG_SEGMENT_BYTES: '1073741824' # 1GB
      KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS: '300000' # 5분
    networks:
      - jeonbuk_net
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "kafka:9092", "--list" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    volumes:
      - kafka_data:/bitnami/kafka

  postgres:
    image: postgres:13
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: jeonbuk_report_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - jeonbuk_net
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d jeonbuk_report_db" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  kafka_data:
    driver: local
  postgres_data:
    # 새로운 볼륨 추가
    driver: local

networks:
  jeonbuk_net:
    driver: bridge
    name: jeonbuk_network
