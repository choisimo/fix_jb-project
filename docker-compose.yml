version: '3.8'

services:
  # Infrastructure Services
  postgres-main:
    image: postgres:14-alpine
    container_name: postgres-main
    environment:
      POSTGRES_DB: jb_main
      POSTGRES_USER: jb_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-jb_password}
    volumes:
      - postgres-main-data:/var/lib/postgresql/data
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jb_user -d jb_main"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jb-network

  postgres-ai:
    image: postgres:14-alpine
    container_name: postgres-ai
    environment:
      POSTGRES_DB: jb_ai
      POSTGRES_USER: jb_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-jb_password}
    volumes:
      - postgres-ai-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U jb_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jb-network

  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - jb-network

  # Service Discovery
  # The eureka-server is temporarily disabled from docker-compose and will be run manually.
  # eureka-server:
  #   image: ewolff/eureka-server
  #   container_name: eureka-server
  #   ports:
  #     - "8761:8761"
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #   networks:
  #     - jb-network

  # API Gateway
  # api-gateway:
  #   build:
  #     context: ./api-gateway
  #     dockerfile: Dockerfile
  #   container_name: api-gateway
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     SPRING_PROFILES_ACTIVE: docker
  #     # EUREKA_URI: http://eureka-server:8761/eureka
  #     REDIS_HOST: redis
  #     REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
  #     JWT_JWK_URI: http://keycloak:8080/auth/realms/jb-platform/protocol/openid-connect/certs
  #   depends_on:
  #     - redis
  #   networks:
  #     - jb-network

  # Main API Server
  main-api-server:
    build:
      context: ./projects/main-api-server
    image: fix_jb-project-main-api
    container_name: main-api-server
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # EUREKA_URI: http://eureka-server:8761/eureka
      DB_HOST: postgres-main
      DB_PORT: 5432
      DB_NAME: jb_main
      DB_USER: jb_user
      DB_PASSWORD: ${DB_PASSWORD:-jb_password}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      keycloak:
        condition: service_started
      postgres-main:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - jb-network

  # AI Analysis Server
  ai-analysis-server:
    build:
      context: ./projects/ai-analysis-server
    image: fix_jb-project-ai-analysis
    container_name: ai-analysis-server
    ports:
      - "8083:8080"
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: docker
      # EUREKA_URI: http://eureka-server:8761/eureka
      DB_HOST: postgres-ai
      DB_PORT: 5432
      DB_NAME: jb_ai
      DB_USER: jb_user
      DB_PASSWORD: ${DB_PASSWORD:-jb_password}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      JWT_SECRET: ${JWT_SECRET}
      GOOGLE_CLOUD_VISION_ENABLED: "false"
    depends_on:
      postgres-ai:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - uploads:/app/uploads
    networks:
      - jb-network

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - jb-network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - jb-network

  # ELK Stack for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200/_cluster/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - jb-network

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.9
    container_name: logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
    ports:
      - "5000:5000"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xms256m -Xmx256m"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - jb-network

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.9
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - jb-network

  # Authentication Service (Keycloak)
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD:-admin}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres-main:5432/jb_main
      KC_DB_USERNAME: jb_user
      KC_DB_PASSWORD: ${DB_PASSWORD:-jb_password}
    ports:
      - "8180:8080"
    command: start-dev
    depends_on:
      postgres-main:
        condition: service_healthy
    networks:
      - jb-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - jb-network

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - jb-network

  # nginx is now external on 192.168.1.15
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - /var/www/image.nodove.com/public:/var/www/image.nodove.com/public:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - jb-network

  # N8N Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: n8n
    ports:
      - "5679:5678"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres-main
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=jb_main
      - DB_POSTGRESDB_USER=jb_user
      - DB_POSTGRESDB_PASSWORD=${DB_PASSWORD:-jb_password}
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD:-n8n_password}
      - WEBHOOK_URL=https://n8n-test.nodove.com/
      - GENERIC_TIMEZONE=Asia/Seoul
    volumes:
      - n8n-data:/home/node/.n8n
    depends_on:
      postgres-main:
        condition: service_healthy
    networks:
      - jb-network
    restart: unless-stopped

  # File Server
  file-server:
    build:
      context: ./projects/file-server
      dockerfile: Dockerfile
    image: fix_jb-project-file-server
    container_name: file-server
    ports:
      - "12020:12020"
    env_file:
      - .env
    environment:
      SERVER_URL: ${FILE_SERVER_URL:-http://localhost:12020}
      API_KEY: ${FILE_SERVER_API_KEY:-file_server_api_key}
      ENABLE_AUTH: "true"
      AI_SERVICE_URL: ${AI_SERVICE_URL:-http://ai-analysis-server:8080}
      AI_SERVICE_TOKEN: ${AI_SERVICE_TOKEN:-}
      KAFKA_ENABLED: ${KAFKA_ENABLED:-false}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_SERVERS:-kafka:9092}
      WORKERS: 4
    volumes:
      - file-server-data:/app/data
    depends_on:
      - redis
      - kafka
    networks:
      - jb-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:12020/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Environment Variables Management Dashboard
  env-manager:
    build: ./env-manager
    container_name: jb-env-manager
    ports:
      - "8888:8888"
    volumes:
      # 메인 환경변수 파일들
      - ./.env:/app/data/.env:rw
      
      # Main API Server 환경변수 파일들
      - ./projects/main-api-server/.env:/app/data/main-api-server/.env:rw
      - ./projects/main-api-server/src/main/resources/application.yml:/app/data/main-api-server/application.yml:rw
      
      # AI Analysis Server 환경변수 파일들
      - ./projects/ai-analysis-server/.env:/app/data/ai-analysis-server/.env:rw
      - ./projects/ai-analysis-server/src/main/resources/application.yml:/app/data/ai-analysis-server/application.yml:rw
      
      # Flutter 앱 환경변수 파일들
      - ./projects/flutter-app/env:/app/data/flutter-app:rw
      
      # 도메인 통합 관리 설정
      - ./domain-config.json:/app/data/domain-config.json:rw
      
      # Docker 소켓 마운트 (컨테이너 관리를 위해)
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - PYTHONUNBUFFERED=1
      - TZ=Asia/Seoul
    restart: unless-stopped
    labels:
      - "com.jb-project.service=env-manager"
      - "com.jb-project.description=Environment Variables Management Dashboard"
    networks:
      - jb-network

volumes:
  postgres-main-data:
  postgres-ai-data:
  redis-data:
  prometheus-data:
  grafana-data:
  elasticsearch-data:
  uploads:
  file-server-data:
  n8n-data:

networks:
  jb-network:
    driver: bridge
