# Spring Boot Configuration
spring:
  application:
    name: jeonbuk-report-platform
  
  # Database Configuration (H2 인메모리 데이터베이스 - 시연용)
  datasource:
    url: jdbc:h2:mem:testdb
    username: sa
    password: 
    driver-class-name: org.h2.Driver
  h2:
    console:
      enabled: true
      path: /h2-console
    
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: create-drop
      naming:
        physical-strategy: org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
        use_sql_comments: true
  
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.JsonSerializer
      properties:
        enable.idempotence: true
        acks: all
        retries: 3
    consumer:
      group-id: report-service-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.jeonbuk.report.dto"
        auto.offset.reset: earliest
  
  # File Upload Configuration
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 200MB
      enabled: true
  
  # Security Configuration
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:your-google-client-id}
            client-secret: ${GOOGLE_CLIENT_SECRET:your-google-client-secret}
            scope: profile,email
          kakao:
            client-id: ${KAKAO_CLIENT_ID:your-kakao-client-id}
            client-secret: ${KAKAO_CLIENT_SECRET:your-kakao-client-secret}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: profile_nickname,account_email
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

# Application Configuration
app:
  jwt:
    secret: ${JWT_SECRET:mySecretKey12345678901234567890123456789012345678901234567890}
    expiration: 86400000 # 24 hours
    refresh-expiration: 604800000 # 7 days
  
  file:
    upload-dir: ${FILE_UPLOAD_DIR:./uploads}
    max-size: 50MB
    allowed-types: image/jpeg,image/png,image/gif,video/mp4,video/avi
  
  roboflow:
    api-key: ${ROBOFLOW_API_KEY:your-roboflow-api-key}
    workspace-url: ${ROBOFLOW_WORKSPACE_URL:your-workspace-url}
  
  openrouter:
    api:
      key: ${OPENROUTER_API_KEY:your-openrouter-api-key}
      base-url: ${OPENROUTER_BASE_URL:https://openrouter.ai/api/v1}
      model: ${OPENROUTER_MODEL:qwen/qwen2.5-vl-72b-instruct:free}
  
  kafka:
    topics:
      image-requests: image_requests
      analysis-results: analysis_results
      notifications: notifications

# Server Configuration
server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: /api/v1
  
# Logging Configuration
logging:
  level:
    com.jeonbuk.report: ${LOG_LEVEL:INFO}
    org.springframework.security: DEBUG
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_PARAM_LOG_LEVEL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/application.log

# Management Configuration (Actuator)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  info:
    env:
      enabled: true

# SpringDoc (Swagger) Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
