
# PRD: 회원가입 및 소셜 로그인 기능 구현

**1. 개요**

현재 애플리케이션에는 회원가입 기능이 없으며, 구글 및 카카오 소셜 로그인이 작동하지 않습니다. 본 문서는 신규 사용자 확보와 사용성 개선을 위해 회원가입 기능과 OAuth2 기반 소셜 로그인을 구현하는 것을 목표로 합니다.

**2. 문제점**

*   **신규 사용자 등록 불가:** 회원가입 UI 및 기능이 없어 신규 사용자가 앱을 사용할 수 없습니다.
*   **소셜 로그인 미작동:** 구글, 카카오 로그인 버튼은 있으나 실제 기능이 구현되어 있지 않아 사용자가 소셜 계정으로 로그인할 수 없습니다.
*   **백엔드 연동 부재:** 로그인 및 회원가입 처리를 위한 백엔드 API가 구현되어 있지 않습니다.

**3. 목표**

*   사용자가 이메일과 비밀번호로 회원가입할 수 있는 기능을 제공합니다.
*   구글 및 카카오 계정을 이용한 소셜 로그인 기능을 구현합니다.
*   프론트엔드와 백엔드 간의 원활한 인증 통신을 구현합니다.
*   사용자 인증 정보를 안전하게 관리합니다.

**4. 요구사항 (Instructions)**

**4.1. 프론트엔드 (Flutter)**

*   **담당 파일:**
    *   `flutter-app/lib/features/auth/presentation/pages/login_page.dart`
    *   `flutter-app/lib/features/auth/presentation/pages/register_page.dart` (신규 생성)
    *   `flutter-app/lib/core/auth/auth_service.dart`
    *   `flutter-app/lib/features/auth/presentation/providers/auth_provider.dart`

*   **세부 구현 사항:**
    1.  **회원가입 버튼 추가 (`login_page.dart`)**
        *   로그인 버튼 하단에 "계정이 없으신가요? **회원가입**" 형태의 텍스트 버튼을 추가합니다.
        *   "회원가입" 버튼 클릭 시 회원가입 페이지(`/register`)로 이동하도록 `Navigator.pushNamed(context, AppRoutes.register);`를 구현합니다.

    2.  **회원가입 페이지 구현 (`register_page.dart`)**
        *   `Scaffold`를 사용하여 기본적인 페이지 구조를 만듭니다.
        *   `Form` 위젯과 `TextFormField`를 사용하여 이름, 이메일, 비밀번호, 비밀번호 확인 입력 필드를 구현합니다.
        *   각 입력 필드에 대한 유효성 검사(validation) 로직을 추가합니다. (예: 이메일 형식, 비밀번호 길이)
        *   "회원가입" 버튼을 추가하고, 버튼 클릭 시 `AuthProvider`를 통해 백엔드에 회원가입을 요청합니다.
        *   회원가입 성공 시 로그인 페이지로 이동하거나 자동으로 로그인 처리 후 홈 화면으로 이동합니다.

    3.  **OAuth 로그인 구현 (`auth_service.dart`)**
        *   `google_sign_in` 및 `kakao_flutter_sdk` 패키지를 `pubspec.yaml`에 추가하고 `pub get`을 실행합니다.
        *   `loginWithGoogle()` 메소드:
            *   `google_sign_in` 패키지를 사용하여 구글 로그인을 요청하고 사용자 정보를 가져옵니다.
            *   가져온 구글 사용자 정보(토큰, 이메일 등)를 백엔드 `/api/auth/oauth/google` 엔드포인트로 전송하여 로그인/회원가입 처리를 요청합니다.
        *   `loginWithKakao()` 메소드:
            *   `kakao_flutter_sdk`를 사용하여 카카오 로그인을 요청하고 사용자 정보를 가져옵니다.
            *   가져온 카카오 사용자 정보(토큰, 이메일 등)를 백엔드 `/api/auth/oauth/kakao` 엔드포인트로 전송하여 로그인/회원가입 처리를 요청합니다.
        *   각 메소드의 `return false;`를 실제 구현으로 대체합니다.

    4.  **인증 상태 관리 (`auth_provider.dart`)**
        *   회원가입을 위한 `register()` 메소드를 추가합니다. 이 메소드는 `AuthService`의 `register()`를 호출하고 결과를 처리합니다.
        *   로그인 및 로그아웃 상태 변경 시 `notifyListeners()`를 호출하여 UI가 즉시 업데이트되도록 합니다.

**4.2. 백엔드 (Spring Boot)**

*   **담당 파일:**
    *   `spring-backend/src/main/java/com/example/project/auth/AuthController.java` (신규 생성)
    *   `spring-backend/src/main/java/com/example/project/auth/AuthService.java` (신규 생성)
    *   `spring-backend/src/main/java/com/example/project/user/User.java` (필요시 수정)
    *   `spring-backend/src/main/java/com/example/project/config/SecurityConfig.java` (신규 생성 또는 수정)

*   **세부 구현 사항:**
    1.  **의존성 추가 (`pom.xml`)**
        *   Spring Security, JWT, Spring Social (또는 각 OAuth2 클라이언트 라이브러리) 의존성을 추가합니다.

    2.  **보안 설정 (`SecurityConfig.java`)**
        *   `WebSecurityConfigurerAdapter`를 상속받아 보안 설정을 구성합니다.
        *   `/api/auth/**` 경로의 요청은 인증 없이 허용하고, 나머지 요청은 인증이 필요하도록 설정합니다.
        *   `PasswordEncoder` 빈을 등록하여 비밀번호를 안전하게 해싱합니다.
        *   JWT 토큰을 검증하는 필터를 추가합니다.

    3.  **API 엔드포인트 구현 (`AuthController.java`)**
        *   `@RestController`와 `@RequestMapping("/api/auth")`을 사용하여 컨트롤러를 정의합니다.
        *   `POST /register`: `AuthService`를 호출하여 사용자 등록을 처리합니다.
        *   `POST /login`: `AuthService`를 호출하여 이메일/비밀번호 로그인을 처리하고, 성공 시 JWT 토큰을 반환합니다.
        *   `POST /oauth/google`: 구글로부터 받은 토큰을 검증하고, 해당 사용자가 존재하지 않으면 새로 등록한 후 JWT 토큰을 반환합니다.
        *   `POST /oauth/kakao`: 카카오로부터 받은 토큰을 검증하고, 위와 동일하게 처리합니다.

    4.  **비즈니스 로직 구현 (`AuthService.java`)**
        *   `@Service` 어노테이션을 사용하여 서비스 클래스를 정의합니다.
        *   `register()`: 사용자 정보를 받아 `PasswordEncoder`로 비밀번호를 암호화한 후 `UserRepository`를 통해 데이터베이스에 저장합니다.
        *   `login()`: 이메일로 사용자를 조회하고, 입력된 비밀번호와 저장된 비밀번호를 비교하여 인증을 수행합니다.
        *   `processOAuthLogin()`: 소셜 로그인 정보를 받아 사용자를 조회하거나 신규 생성한 후, 애플리케이션의 JWT 토큰을 생성하여 반환합니다.

**5. 테스트 케이스**

*   **회원가입:**
    *   유효한 정보로 회원가입 시 성공적으로 등록되고 로그인 페이지로 이동하는지 확인합니다.
    *   중복된 이메일로 가입 시도 시 에러 메시지가 표시되는지 확인합니다.
*   **로그인:**
    *   올바른 이메일/비밀번호로 로그인 시 홈 화면으로 이동하는지 확인합니다.
    *   틀린 정보로 로그인 시 에러 메시지가 표시되는지 확인합니다.
*   **소셜 로그인:**
    *   구글/카카오 버튼 클릭 시 각 플랫폼의 로그인 화면이 정상적으로 나타나는지 확인합니다.
    *   로그인 성공 후 홈 화면으로 이동하는지 확인합니다.
    *   최초 소셜 로그인 시 백엔드에 새로운 사용자가 등록되는지 확인합니다.

**6. 예상 결과**

*   사용자는 앱 내에서 직접 회원가입을 할 수 있습니다.
*   사용자는 구글 및 카카오 계정을 통해 간편하게 로그인/회원가입을 할 수 있습니다.
*   모든 사용자 인증 정보는 백엔드에서 안전하게 관리됩니다.
