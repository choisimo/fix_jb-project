# 전북 신고 플랫폼 인증 시스템 개선/수정 PRD
## PRD-0711-1150

### 📋 개요
전북 신고 플랫폼의 OAuth 로그인 및 일반 회원가입 시스템의 일관성 검사 후 발견된 개선 및 수정 필요사항을 정리한 문서

---

### 🔍 현재 상태 분석

#### ✅ 구현 완료된 기능
- ✅ JWT 기반 인증 시스템 (Access/Refresh/Temp 토큰)
- ✅ OAuth2 통합 (Google/Kakao)
- ✅ Redis 기반 토큰 관리 및 블랙리스트
- ✅ 소셜 로그인 추가 정보 입력 플로우
- ✅ 중복 검증 API (이메일/이름/전화번호)
- ✅ 통합 AuthController (/api/auth/*)

#### ⚠️ 발견된 문제점 및 개선사항

---

### 🚨 **CRITICAL 수정 필요사항**

#### **1. SecurityConfig OAuth2 라우팅 충돌**
**문제**: AuthController와 SecurityConfig의 OAuth2 경로가 충돌
- AuthController: `/api/auth/oauth2/authorization/{registrationId}` (110행)
- SecurityConfig: `/oauth2/authorization` (49행)

**해결책**:
```java
// AuthController.java - 제거 필요
@GetMapping("/oauth2/authorization/{registrationId}") // 이 엔드포인트 삭제

// SecurityConfig.java - 유지
.authorizationEndpoint(authorization -> authorization
    .baseUri("/oauth2/authorization"))
```

#### **2. JwtAuthenticationFilter TokenService 의존성 불일치**
**문제**: SecurityConfig에서 TokenService 주입 없이 JwtAuthenticationFilter 생성
- 현재: `new JwtAuthenticationFilter(jwtTokenProvider)` (56행)
- 필요: TokenService 주입하여 블랙리스트 검증 활성화

**해결책**:
```java
// SecurityConfig.java 수정
@RequiredArgsConstructor
public class SecurityConfig {
    private final JwtTokenProvider jwtTokenProvider;
    private final TokenService tokenService; // 추가
    
    // filterChain에서
    .addFilterBefore(new JwtAuthenticationFilter(jwtTokenProvider, tokenService), ...)
}
```

#### **3. application.yml JWT 설정 불일치**
**문제**: JWT 설정이 코드와 맞지 않음
- application.yml: `app.jwt.*` 설정 있음 (91-94행)
- JwtTokenProvider: `@Value("jwt.*")` 사용 (22-29행)

**해결책**:
```yaml
# application.yml 수정
jwt:
  secret: ${JWT_SECRET:mySecretKey...}
  token-validity-in-seconds: 86400  # 24시간
  refresh-token-validity-in-seconds: 604800  # 7일
```

---

### 🔧 **HIGH Priority 개선사항**

#### **4. OAuth2 콜백 URL 불일치**
**문제**: AuthController `/oauth2/callback/{registrationId}` 엔드포인트가 실제 OAuth2 플로우에서 호출되지 않음

**해결책**: 콜백 처리를 OAuth2AuthenticationSuccessHandler로 완전 이관하고 불필요한 콜백 엔드포인트 제거

#### **5. 로그인 시 Refresh Token 저장 누락**
**문제**: `/login` 엔드포인트에서 Refresh Token 생성하지만 Redis 저장 누락 (63행)

**해결책**:
```java
// AuthController.login() 메서드
tokenService.saveRefreshToken(user.getEmail(), refreshToken); // 이미 구현됨
```

#### **6. 환경변수 기본값 보안 취약성**
**문제**: 민감한 설정값들이 기본값으로 노출
- JWT_SECRET: 하드코딩된 기본값 (92행)
- OAuth Client ID/Secret: "your-xxx-client-id" 형태 (72-77행)

**해결책**:
```yaml
# 운영 환경에서는 기본값 제거
GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}  # 기본값 없음
JWT_SECRET: ${JWT_SECRET}  # 기본값 없음
```

---

### 📈 **MEDIUM Priority 개선사항**

#### **7. UserService 중복 검증 로직 최적화**
**현재**: 개별 쿼리로 중복 확인
**개선**: 배치 검증 API 제공

#### **8. OAuth2 에러 처리 개선**
**문제**: OAuth2AuthenticationFailureHandler 미구현
**해결**: 프론트엔드 친화적 에러 리다이렉트 구현

#### **9. 토큰 만료 시간 설정 통일**
**문제**: 여러 곳에 분산된 토큰 만료 시간 설정
**해결**: 중앙화된 토큰 설정 관리

#### **10. API 응답 형식 표준화**
**문제**: 일부 에러 응답이 ApiResponse 형식 미사용
**해결**: 모든 API 응답을 ApiResponse로 통일

---

### 🔒 **보안 강화 필요사항**

#### **11. CORS 설정 누락**
**문제**: 프론트엔드 연동을 위한 CORS 설정 부재
**해결책**:
```java
@Configuration
public class CorsConfig {
    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        // CORS 설정 구현
    }
}
```

#### **12. Rate Limiting 부재**
**문제**: 로그인/회원가입 API에 Rate Limiting 없음
**해결**: Spring Security Rate Limiting 적용

#### **13. 패스워드 정책 미적용**
**문제**: 패스워드 복잡도 검증 부재
**해결**: 패스워드 정책 validation 구현

---

### 🧪 **테스트 및 모니터링 개선**

#### **14. 통합 테스트 부재**
**필요**: OAuth2 플로우 end-to-end 테스트

#### **15. 보안 이벤트 로깅 미흡**
**개선**: 실패한 로그인 시도, 토큰 남용 등 보안 이벤트 로깅

#### **16. 헬스체크 엔드포인트 개선**
**추가**: Redis 연결 상태, JWT 토큰 검증 상태 포함

---

### 📱 **프론트엔드 연동 고려사항**

#### **17. OAuth2 리다이렉트 URL 설정**
**현재**: 하드코딩된 localhost:3000
**개선**: 환경별 설정 가능하도록 변경

#### **18. 토큰 갱신 자동화**
**추가**: Access Token 만료 전 자동 갱신 로직

#### **19. 로그아웃 후 처리**
**개선**: 클라이언트 토큰 클리어 가이드

---

### 🗃️ **데이터베이스 및 인프라**

#### **20. User 테이블 인덱스 최적화**
**추가 필요 인덱스**:
- `email` (중복 확인용)
- `oauth_provider + oauth_id` (소셜 로그인용)
- `is_active + email` (로그인 조회용)

#### **21. Redis 설정 최적화**
**개선**:
- Connection Pool 설정 조정
- Redis Cluster 모드 지원
- 토큰 만료 정책 최적화

---

### 📝 **구현 우선순위**

#### **Phase 1 (CRITICAL - 즉시 수정)**
1. SecurityConfig OAuth2 라우팅 충돌 해결
2. JwtAuthenticationFilter TokenService 의존성 수정
3. application.yml JWT 설정 통일
4. 환경변수 보안 강화

#### **Phase 2 (HIGH - 1주일 내)**
5. OAuth2 콜백 플로우 정리
6. 중복 검증 로직 최적화
7. CORS 설정 추가
8. 에러 처리 표준화

#### **Phase 3 (MEDIUM - 2주일 내)**
9. 보안 강화 (Rate Limiting, 패스워드 정책)
10. 통합 테스트 구현
11. 모니터링 및 로깅 개선
12. 프론트엔드 연동 최적화

#### **Phase 4 (LOW - 장기)**
13. 데이터베이스 최적화
14. Redis 클러스터링
15. 성능 최적화
16. 고급 보안 기능

---

### 🎯 **예상 효과**

#### **보안 향상**
- OAuth2 플로우 안정성 증대
- 토큰 관리 보안 강화
- 인증 시스템 무결성 확보

#### **개발 효율성**
- 일관된 API 응답 형식
- 표준화된 에러 처리
- 유지보수성 향상

#### **사용자 경험**
- 안정적인 소셜 로그인
- 빠른 인증 처리
- 명확한 에러 메시지

---

### 📋 **검증 기준**

#### **기능 검증**
- [ ] Google/Kakao OAuth2 로그인 정상 동작
- [ ] 일반 회원가입/로그인 정상 동작
- [ ] 토큰 갱신 및 로그아웃 정상 동작
- [ ] 중복 검증 API 정상 동작

#### **보안 검증**
- [ ] JWT 토큰 변조 방지 확인
- [ ] 블랙리스트 토큰 차단 확인
- [ ] OAuth2 CSRF 보호 확인
- [ ] Rate Limiting 동작 확인

#### **성능 검증**
- [ ] 로그인 응답시간 < 500ms
- [ ] Redis 연결 안정성 확인
- [ ] 동시 접속 처리 확인

---

### 📞 **담당자 정보**
- **작성자**: AI Assistant
- **작성일**: 2025-07-11 11:50
- **검토 필요**: Backend 개발팀
- **승인 필요**: 시스템 아키텍트

---

### 📎 **관련 문서**
- [OAuth 2.0 구현 가이드](../documents/ROBOFLOW_INTEGRATION_COMPLETE.md)
- [JWT 토큰 관리 정책](../documents/SPRING_BOOT_DOMAIN_DTO_DESIGN.md)
- [보안 체크리스트](../documents/API_ERROR_SOLUTION.md)