# PRD: 백엔드 서비스 통합 리팩토링 (`spring-backend` -> `flutter-backend`)

## 1. 개요

현재 프로젝트에는 `spring-backend` (Maven 기반)와 `flutter-backend` (Gradle 기반) 두 개의 Spring Boot 백엔드 서비스가 존재하며, 상당 부분 기능이 중복되고 있습니다. 본 리팩토링의 목표는 이 두 프로젝트를 `flutter-backend` 프로젝트로 통합하여 단일화된 백엔드 서비스를 구축하는 것입니다. 이를 통해 코드 중복을 제거하고, 유지보수성을 향상시키며, 일관된 개발 환경을 제공합니다.

## 2. 목표

*   `spring-backend`의 모든 기능과 `flutter-backend`의 기존 기능을 `flutter-backend` 프로젝트 내에 완벽하게 통합합니다.
*   빌드 시스템을 Gradle로 단일화합니다.
*   설정 파일을 `application.yml`로 단일화하고, `spring-backend`의 더 포괄적인 설정을 우선시합니다.
*   도메인 모델(엔티티, DTO)의 충돌을 해결하고, `spring-backend`의 더 견고하고 확장성 있는 모델을 표준으로 채택합니다.
*   AI 분석 및 알림 서비스와 같은 핵심 기능의 통합을 명확히 합니다.
*   통합 후 모든 기존 기능이 정상 작동함을 보장합니다.

## 3. 범위

*   `spring-backend` 프로젝트의 모든 Java 소스 코드, 리소스 파일, 테스트 코드 및 의존성을 `flutter-backend`로 마이그레이션합니다.
*   `flutter-backend`의 `build.gradle` 파일을 업데이트하여 `spring-backend`의 모든 Maven 의존성을 포함합니다.
*   `flutter-backend`의 `src/main/resources/application.properties`와 `spring-backend`의 `src/main/resources/application.yml`을 `flutter-backend/src/main/resources/application.yml`로 병합합니다.
*   두 프로젝트 간의 중복되거나 충돌하는 클래스(특히 도메인 엔티티, DTO, 컨트롤러, 서비스)를 식별하고 통합합니다.
*   통합 과정에서 필요한 패키지명, 클래스명, 임포트 문 등을 수정합니다.
*   통합된 백엔드 서비스의 기능 및 성능을 검증합니다.

## 4. 상세 계획

### 4.1. 환경 설정 및 백업

*   `flutter-backend` 및 `spring-backend` 프로젝트의 현재 상태를 Git을 통해 안전하게 백업합니다.
*   새로운 브랜치를 생성하여 리팩토링 작업을 진행합니다.

### 4.2. Gradle 빌드 파일 업데이트 (`flutter-backend/build.gradle`)

*   `spring-backend/pom.xml`에 정의된 모든 `dependencies`를 `flutter-backend/build.gradle`로 마이그레이션합니다. 특히 다음 의존성들을 추가합니다:
    *   `spring-boot-starter-websocket`
    *   `spring-boot-starter-cache`
    *   `spring-boot-starter-actuator`
    *   `hibernate-spatial` (PostGIS 지원)
    *   `jjwt-api`, `jjwt-impl`, `jjwt-jackson` (JWT 지원)
    *   `spring-kafka` (Kafka 지원)
    *   `spring-boot-starter-webflux` (WebClient 지원)
    *   `commons-fileupload`, `commons-io` (파일 업로드 유틸리티)
    *   `springdoc-openapi-starter-webmvc-ui` (Swagger/OpenAPI 문서화)
    *   `org.mapstruct:mapstruct-processor` (MapStruct 프로세서)
    *   `org.testcontainers` 관련 테스트 의존성
*   Java 버전을 `spring-backend`의 `17` 또는 `flutter-backend`의 `21` 중 하나로 통일합니다. (권장: 21)
*   `spring-backend`의 `build` 섹션에 있는 `maven-compiler-plugin` 설정 (특히 `annotationProcessorPaths` for Lombok and MapStruct)을 `flutter-backend`의 `build.gradle`에 적용합니다.

### 4.3. 설정 파일 통합 (`flutter-backend/src/main/resources/application.yml`)

*   `spring-backend/src/main/resources/application.yml`의 모든 내용을 `flutter-backend/src/main/resources/application.yml`로 복사합니다.
*   `flutter-backend/src/main/resources/application.properties`의 내용을 `application.yml` 형식으로 변환하여 병합합니다.
*   충돌하는 설정 항목(예: `server.port`, `spring.application.name`, `roboflow` 설정)에 대해서는 `spring-backend`의 설정을 우선시합니다.
*   `spring-backend`에 정의된 Kafka, OpenRouter, JWT, OAuth2 관련 환경 변수 플레이스홀더 및 기본값들을 `application.yml`에 정확히 반영합니다.

### 4.4. Java 소스 코드 마이그레이션 및 통합

*   **기존 `flutter-backend`의 `com.fix_jb_team.demo` 패키지 제거:**
    *   `flutter-backend/src/main/java/com/fix_jb_team/demo/DemoApplication.java` 및 관련 테스트 파일을 삭제합니다.
*   **`spring-backend`의 `com.jeonbuk.report` 패키지 이동:**
    *   `spring-backend/src/main/java/com/jeonbuk/report/` 아래의 모든 디렉토리와 파일을 `flutter-backend/src/main/java/com/jeonbuk/report/`로 이동합니다.
*   **충돌 해결 및 통합:**
    *   **도메인 엔티티 및 DTO:**
        *   `spring-backend`의 엔티티(`User`, `Report`, `Category`, `Status`, `Comment`, `ReportFile` 등)를 표준으로 채택합니다. `spring-backend`의 엔티티는 UUID 기반 ID, PostGIS 지원, 더 상세한 필드 등을 포함하여 더 견고합니다.
        *   `flutter-backend/src/main/java/com/jeonbuk/report/domain/` 및 `dto/` 아래의 해당 엔티티 및 DTO들을 `spring-backend`의 모델에 맞게 수정하거나 대체합니다. (예: `ReportCategory` 엔티티를 `Category` 엔티티로, `ReportStatus` enum을 `Status` 엔티티로 대체하고 관련 로직 수정).
        *   모든 ID를 UUID 기반으로 통일합니다.
    *   **`RestClientConfig.java`:** `spring-backend/src/main/java/com/jeonbuk/report/infrastructure/config/RestClientConfig.java`를 유지하고 `flutter-backend/src/main/java/com/jeonbuk/report/config/RestClientConfig.java`는 제거합니다.
    *   **AI 서비스 (`RoboflowService` vs `RoboflowApiClient`):**
        *   `spring-backend/src/main/java/com/jeonbuk/report/infrastructure/external/roboflow/RoboflowApiClient.java`를 유지합니다.
        *   `flutter-backend/src/main/java/com/jeonbuk/report/service/RoboflowService.java`에서 제공하는 비즈니스 로직(예: 한국어 클래스명 매핑, 문제 유형별 카테고리/우선순위/부서 매핑, 목업 응답 생성)을 `RoboflowApiClient` 또는 `spring-backend`의 `application/service/IntegratedAiAgentService.java`나 새로운 `AiAnalysisService`로 이전하여 통합합니다.
    *   **컨트롤러:**
        *   `flutter-backend/src/main/java/com/jeonbuk/report/controller/AIAnalysisController.java`의 기능을 `spring-backend/src/main/java/com/jeonbuk/report/presentation/controller/AiRoutingController.java`로 통합합니다. `AiRoutingController`가 더 포괄적인 AI 분석 및 라우팅 기능을 제공하므로, 이를 중심으로 `AIAnalysisController`의 특정 엔드포인트 및 로직을 흡수합니다.
        *   `flutter-backend/src/main/java/com/jeonbuk/report/controller/ReportController.java`와 `spring-backend/src/main/java/com/jeonbuk/report/presentation/controller/ReportController.java`를 병합합니다. `spring-backend`의 `ReportController`가 더 많은 기능을 포함하므로, 이를 기반으로 `flutter-backend`의 특정 로직을 이식합니다.
        *   `spring-backend`의 `AlertController`와 `UserController`는 그대로 유지합니다.
    *   **기타 서비스:** `spring-backend`의 `AiRoutingService`, `AlertService`, `ImageAnalysisService`, `IntegratedAiAgentService`, `UserService`, `ValidationAiAgentService`는 모두 유지하고 필요한 경우 리팩토링된 도메인 모델에 맞게 수정합니다.
*   **패키지 및 임포트 수정:**
    *   모든 Java 파일 내에서 변경된 패키지 구조 및 클래스명에 따라 임포트 문과 내부 참조를 업데이트합니다.
    *   `JeonbukReportPlatformApplication.java`가 메인 애플리케이션 클래스가 되도록 설정합니다.

### 4.5. 테스트 코드 마이그레이션

*   `flutter-backend/src/test/java/com/fix_jb_team/demo/DemoApplicationTests.java`를 삭제합니다.
*   `spring-backend`에 존재하는 모든 테스트 코드(단위, 통합 테스트)를 `flutter-backend/src/test/java/com/jeonbuk/report/`로 이동하고, 변경된 코드베이스에 맞게 수정합니다.

### 4.6. 빌드 및 테스트

*   통합된 `flutter-backend` 프로젝트를 빌드하여 모든 컴파일 오류를 해결합니다.
*   모든 단위 테스트 및 통합 테스트를 실행하여 기능이 정상 작동하는지 확인합니다.
*   Swagger UI (`/api/v1/swagger-ui.html`)를 통해 모든 API 엔드포인트가 올바르게 노출되고 작동하는지 확인합니다.
*   수동 테스트를 통해 핵심 비즈니스 흐름(보고서 생성, AI 분석, 알림 등)을 검증합니다.

## 5. 검증 (Verification)

*   **기능 검증:**
    *   모든 API 엔드포인트가 예상대로 작동하는지 확인합니다.
    *   보고서 생성, 수정, 조회, 삭제 기능이 정상 작동하는지 확인합니다.
    *   사용자 인증(일반 로그인, OAuth) 및 권한 부여가 올바르게 작동하는지 확인합니다.
    *   AI 분석(객체 감지, OCR) 및 관련 데이터가 올바르게 처리되고 저장되는지 확인합니다.
    *   Kafka를 통한 메시지 발행 및 소비가 정상 작동하는지 확인합니다.
    *   알림 서비스가 예상대로 알림을 생성하고 전송하는지 확인합니다.
    *   PostGIS를 이용한 위치 기반 검색이 정상 작동하는지 확인합니다.
*   **성능 검증:**
    *   주요 API의 응답 시간을 모니터링하여 성능 목표를 충족하는지 확인합니다.
*   **코드 품질 검증:**
    *   코드 스타일, 명명 규칙, 아키텍처 패턴이 일관되게 유지되는지 확인합니다.
    *   불필요한 코드나 주석을 제거합니다.

## 6. 롤백 계획

*   리팩토링 작업은 Git의 별도 브랜치에서 진행하며, 각 주요 단계별로 커밋을 남깁니다.
*   문제가 발생하거나 통합이 예상보다 복잡해질 경우, 이전 안정적인 커밋으로 쉽게 롤백할 수 있도록 합니다.
*   통합 전 원본 `spring-backend` 및 `flutter-backend` 프로젝트의 전체 백업을 유지합니다.
