✦ 제품 요구사항 문서 (PRD) - 
  현장 보고 및 관리 통합 플랫폼

  1. 개요 (Introduction)


  본 문서는 "현장 보고 및
  관리 통합 플랫폼"의 제품
  요구사항을 정의합니다. 이
  플랫폼은 사용자가 현장에서
  발생하는 다양한 문제(도로
  파손, 쓰레기 불법 투기,
  시설물 파손 등)를 신속하게
  보고하고, AI 기반의 이미지
  분석을 통해 보고서의
  정확성을 높이며, 관련
  기관이 효율적으로 문제를
  관리하고 처리할 수 있도록
  지원하는 것을 목표로
  합니다.

  2. 목표 (Goals & 
  Objectives)


   * 신속한 현장 문제 보고:
     사용자가 모바일 앱을 통해
     현장 문제를 쉽고 빠르게
     보고할 수 있도록 합니다.
   * AI 기반 보고서 정확성 
     향상: 이미지 분석 AI를
     활용하여 보고서에 포함된
     문제 유형 및 심각도를
     자동으로 식별하고
     분류합니다.
   * 효율적인 문제 관리: 보고된
     문제를 카테고리 및
     우선순위에 따라 분류하고,
     관련 담당자에게 실시간으로
     알림을 제공하여 처리
     효율성을 높입니다.
   * 투명한 처리 과정: 보고서의
     처리 상태를 사용자에게
     실시간으로 제공하여
     투명성을 확보합니다.
   * 확장 가능한 아키텍처: 향후
     다양한 문제 유형 및 추가
     기능 확장을 위한 유연하고
     견고한 시스템 기반을
     마련합니다.

  3. 사용자 페르소나/스토리 
  (User Personas/Stories)


   * 현장 보고자 (일반 
     시민/직원):
       * "나는 현장에서 도로
         파손을 발견했을 때,
         스마트폰으로 사진을
         찍어 즉시 보고하고
         싶다."
       * "나는 내가 보고한
         문제의 처리 진행
         상황을 실시간으로
         확인하고 싶다."
       * "나는 보고서 작성 시
         문제의 종류를 AI가
         자동으로 분류해주면
         좋겠다."
   * 관리자/담당자 (기관 직원):
       * "나는 시스템에 접수된
         새로운 보고서를
         실시간으로 확인하고,
         중요도에 따라
         우선순위를 지정하고
         싶다."
       * "나는 보고서에 첨부된
         이미지를 통해 문제의
         상세 내용을 파악하고,
         필요한 경우 추가
         정보를 요청하고 싶다."
       * "나는 보고서 처리 후
         피드백을 남기고, 처리
         완료 상태로 변경하고
         싶다."

  4. 기능 요구사항 (Functional 
  Requirements)


  4.1. 이미지 분석 및 보고서 
  생성
   * 이미지 업로드: 사용자는
     보고서 작성 시 이미지
     파일을 첨부할 수 있습니다.
   * AI 기반 문제 감지 및 분류:
     업로드된 이미지를 Roboflow
     AI를 통해 분석하여 다음
     카테고리의 문제들을
     감지하고 분류합니다:
       * 도로 파손, 포트홀,
         맨홀 손상, 인도 균열,
         교통표지판 손상
       * 무단 투기 (쓰레기 불법
         투기), 낙서
       * 간판 파손, 펜스 파손,
         가로등 고장, 건물 손상
       * 누수, 전기 위험, 공사
         문제
       * 기타 공공 문제
   * 카테고리 및 우선순위 자동 
     부여: AI 분석 결과에 따라
     보고서에 적절한
     카테고리(예: 도로/교통,
     환경/위생, 건축물 등)와
     우선순위(긴급, 높음, 보통,
     낮음)를 자동으로
     부여합니다.
   * 보고서 상세 정보: 제목,
     내용, 위치 정보(위도,
     경도, 주소), 작성자 정보
     등을 포함합니다.
   * 파일 첨부: 이미지 외에
     추가적인 파일(예:
     동영상)을 첨부할 수
     있습니다.
   * 전자 서명: 보고서에 전자
     서명을 추가할 수 있습니다.


  4.2. 실시간 알림 및 결과 전달
   * 비동기 처리: 이미지 분석
     요청은 Kafka를 통해
     비동기적으로 처리됩니다.
   * 실시간 결과 알림: AI 분석
     완료 후, WebSocket을 통해
     클라이언트에게 분석 결과
     및 처리 상태를 실시간으로
     푸시합니다.
   * 알림 관리: 사용자에게
     보고서 상태 변경, 댓글
     추가 등 다양한 알림을
     제공합니다.



  4.3. 사용자 및 권한 관리
   * 사용자 등록/로그인:
     이메일/비밀번호 기반의
     사용자 등록 및 로그인을
     지원합니다.
   * OAuth 로그인: Google,
     Kakao 등 소셜 로그인을
     지원합니다.
   * 역할 기반 권한: 일반
     사용자, 관리자 등 역할에
     따른 접근 권한을
     관리합니다.


  4.4. 보고서 조회 및 관리
   * 보고서 목록 조회:
     필터링(상태, 카테고리),
     검색(키워드), 정렬(최신순)
     기능을 포함한 보고서 목록을
      제공합니다.
   * 보고서 상세 조회: 특정
     보고서의 모든 상세
     정보(첨부 파일, 서명, 댓글
     포함)를 조회합니다.
   * 보고서 상태 변경: 관리자는
     보고서의 상태(접수, 처리
     중, 완료, 반려 등)를 변경할
      수 있습니다.
   * 피드백 제공: 관리자는
     보고서 반려 시 피드백을
     제공할 수 있습니다.


  4.5. 댓글 기능
   * 댓글 작성: 보고서에 대한
     댓글을 작성할 수 있습니다.
   * 댓글 조회: 보고서에 달린
     댓글 목록을 조회할 수
     있습니다.

  5. 비기능 요구사항 
  (Non-Functional Requirements)



   * 성능:
       * 이미지 분석 요청 접수
         응답 시간: 1초 이내
       * AI 분석 결과 전달
         시간: 5초 이내
         (네트워크 및 AI 모델
         처리 시간에 따라 변동
         가능)
       * 보고서 목록 조회 응답
         시간: 2초 이내
   * 확장성:
       * 사용자 및 보고서 수
         증가에 따른 시스템
         확장이 용이해야
         합니다.
       * 새로운 AI 모델 및
         카테고리 추가가
         용이해야 합니다.
   * 보안:
       * 사용자 인증 및 권한
         부여 메커니즘을 통해
         데이터 접근을
         제어합니다.
       * API 키 등 민감 정보는
         환경 변수로
         관리합니다.
       * 데이터 전송 시
         암호화(HTTPS, WSS)를
         적용합니다.
   * 안정성:
       * Kafka를 통한 비동기
         처리로 시스템 장애 시
         메시지 유실을
         방지합니다.
       * Docker Compose를 통한
         서비스 격리 및 쉬운
         배포/관리를
         지원합니다.
   * 사용성:
       * 직관적이고 사용자
         친화적인 모바일 앱
         UI/UX를 제공합니다.

  6. 기술 스택 및 아키텍처 
  (Technical Stack & 
  Architecture)


   * 클라이언트: Flutter (Dart)
   * API 게이트웨이: Python
     FastAPI
   * 메시지 큐: Apache Kafka
   * 메시지 브로커: Apache
     Zookeeper
   * AI 워커: Python (Confluent
     Kafka Client, Requests
     라이브러리)
   * AI 모델: Roboflow
     (서버리스 워크플로우)
   * 관계형 데이터베이스 (RDB):
     PostgreSQL
   * 캐시/세션 저장소: Redis
   * 로그/비정형 데이터 저장 
     (향후 확장): MongoDB

  아키텍처 다이어그램 (개념적):




    1 graph TD
    2     A[Flutter 
      App] -->|HTTP/
      WebSocket| B(API
      Gateway: FastAPI)
    3     B -->|Produce
      | C(Kafka:
      image_requests
      Topic)
    4     C
      -->|Consume| D(AI
      Worker: Python)
    5     D -->|HTTP
      Request| E
      (Roboflow AI)
    6     E -->|AI
      Result| D
    7     D
      -->|Produce| F
      (Kafka:
      analysis_results
      Topic)
    8     F
      -->|Consume| B
    9     B
      -->|WebSocket| A
   10     B --o G
      (PostgreSQL)
   11     B --o H
      (Redis)
   12     D --o G
   13     D --o H
   14     subgraph Data
      Storage
   15         G
   16         H
   17         I(MongoDB
      - Future)
   18     end


  7. 향후 고려사항 (Future 
  Considerations)



   ... first 7 lines h…
      image_requests
      Topic)
    4     C
      -->|Consume| D(AI
      Worker: Python)
    5     D -->|HTTP
      Request| E
   * MongoDB 통합: 대용량 로그,
     알림 기록, 비정형 데이터
     저장을 위한 MongoDB 연동
     구현.
   * 푸시 알림: Firebase Cloud
     Messaging (FCM) 등을
     활용한 모바일 푸시 알림
     기능 강화.
   * 통계 및 대시보드: 보고서
     데이터 기반의 통계 및
     관리자 대시보드 구현.
   * 위치 기반 서비스: 사용자
     위치 기반의 보고서 추천 및
     지도 연동 기능 강화.
   * 다국어 지원: 앱 및
     백엔드의 다국어 지원 기능
     추가.
   * CI/CD 파이프라인: 자동화된
     테스트, 빌드, 배포
     파이프라인 구축.


  ---

