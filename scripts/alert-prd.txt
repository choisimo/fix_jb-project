# PRD: 알림 서비스 통합

## 1. 개요
'픽스 전북' 플랫폼의 사용자(모바일 앱) 및 관리자(웹 대시보드)에게 실시간으로 중요한 이벤트 및 상태 변경을 알림으로써 사용자 경험을 향상시키고 관리 효율성을 증대합니다.

## 2. 목표
*   보고서 제출, 상태 변경, 담당자 지정 등 핵심 이벤트에 대한 즉각적인 알림 제공.
*   모바일 앱 푸시 알림, 웹 대시보드 실시간 알림 등 다양한 채널 지원.
*   안정적이고 확장 가능한 알림 시스템 구축.

## 3. 범위
*   **모바일 애플리케이션 (Flutter):** 푸시 알림 수신 및 표시.
*   **웹 대시보드 (Spring Boot + Frontend):** 실시간 인앱 알림 수신 및 표시.
*   **백엔드 서비스 (Spring Boot):** 알림 이벤트 트리거 및 전송 로직.
*   **메시징 시스템 (Apache Kafka):** 알림 이벤트 발행 및 구독.

## 4. 주요 기능
*   **보고서 관련 알림:**
    *   새로운 보고서 제출 시 관리자에게 알림.
    *   보고서 상태 변경 (접수, 처리 중, 완료, 반려 등) 시 관련 사용자에게 알림.
    *   보고서 담당자 지정/변경 시 해당 담당자에게 알림.
    *   보고서에 대한 피드백/댓글 추가 시 관련 사용자에게 알림.
*   **시스템 알림:**
    *   중요 시스템 이벤트 (예: AI 분석 완료, 오류 발생) 발생 시 관리자에게 알림.
*   **알림 채널:**
    *   **모바일 푸시 알림 (FCM):** 모바일 앱이 백그라운드 또는 종료 상태일 때 알림.
    *   **웹 소켓 / SSE (웹 대시보드):** 웹 대시보드가 활성화되어 있을 때 실시간 인앱 알림.
    *   **인앱 알림 (모바일/웹):** 앱/대시보드 내 알림 목록 또는 배지 표시.

## 5. 기술 스택 및 아키텍처
*   **이벤트 기반 아키텍처:**
    *   핵심 이벤트 발생 시 (예: 보고서 생성, 상태 변경) Spring Boot 백엔드에서 Kafka 토픽으로 알림 이벤트를 발행.
    *   별도의 알림 서비스 (또는 기존 백엔드 내 모듈)가 Kafka 토픽을 구독하여 알림 전송 로직 수행.
*   **모바일 푸시 알림:**
    *   **FCM (Firebase Cloud Messaging):** Google의 FCM 서비스를 활용하여 모바일 앱으로 푸시 알림 전송.
    *   **백엔드:** Firebase Admin SDK를 사용하여 FCM 메시지 전송.
    *   **Flutter 앱:** `firebase_messaging` 패키지를 사용하여 FCM 메시지 수신 및 처리.
*   **웹 대시보드 실시간 알림:**
    *   **WebSocket:** Spring Boot의 `spring-boot-starter-websocket`을 활용하여 웹 소켓 서버 구축.
    *   **Frontend:** WebSocket 클라이언트를 사용하여 서버와 연결하고 실시간 알림 수신.
    *   **대안 (SSE):** WebSocket 대신 SSE를 고려할 수 있으며, 이는 단방향 통신에 더 적합하고 구현이 간단할 수 있음. (초기 구현 시 고려)
*   **데이터베이스:** 알림 내역 저장을 위한 PostgreSQL.

## 6. 데이터 흐름
1.  **이벤트 발생:** Spring Boot 백엔드에서 보고서 생성, 상태 변경 등 알림을 트리거하는 이벤트 발생.
2.  **Kafka 발행:** 해당 이벤트 정보를 포함하는 메시지를 Kafka의 `notification-events` 토픽으로 발행.
3.  **알림 서비스 구독:** 별도의 알림 서비스 (또는 백엔드 내 알림 모듈)가 `notification-events` 토픽을 구독.
4.  **알림 처리:**
    *   **모바일 대상:** FCM 토큰을 사용하여 Firebase Admin SDK를 통해 FCM으로 푸시 알림 전송.
    *   **웹 대시보드 대상:** WebSocket (또는 SSE)을 통해 연결된 클라이언트에게 실시간 메시지 전송.
5.  **클라이언트 수신:**
    *   **모바일 앱:** FCM 메시지 수신 및 로컬 알림 표시.
    *   **웹 대시보드:** WebSocket (또는 SSE) 메시지 수신 및 UI 업데이트.

## 7. 보안 고려사항
*   FCM 서버 키 및 Firebase Admin SDK 자격 증명은 안전하게 관리 (환경 변수, Vault 등).
*   WebSocket/SSE 연결 시 인증 (JWT) 적용하여 인가된 사용자만 알림 수신.
*   민감한 정보는 알림 페이로드에 직접 포함하지 않고, 필요시 API 호출을 통해 상세 정보 조회.

## 8. 모니터링 및 로깅
*   알림 전송 성공/실패 여부 로깅.
*   Kafka 메시지 처리량 및 지연 시간 모니터링.
*   FCM 전송 통계 모니터링.

## 9. 향후 개선 사항
*   사용자별 알림 설정 (예: 특정 유형의 알림만 받기).
*   알림 그룹화 및 요약 기능.
*   이메일/SMS 알림 채널 추가.
