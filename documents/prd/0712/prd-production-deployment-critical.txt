# Production 배포 Critical Issues 해결 PRD

## 1. 목적 및 개요
- 현재 프로젝트의 Production 배포를 가능하게 하기 위한 필수 이슈 해결
- 보안, 빌드, 핵심 기능의 최우선 문제점 해결
- 안전하고 안정적인 Production 환경 구축

## 2. 현재 Critical Issues 분석

### 🔴 Priority 1: 보안 설정 위험 (즉시 해결 필요)
**현재 상태:**
- OAuth 클라이언트 ID/Secret: `your-google-client-id` (placeholder)
- API 키들: `your-roboflow-api-key`, `your-openrouter-api-key` (placeholder)
- JWT Secret: 하드코딩된 기본값 `mySecretKey...`
- DB 패스워드: `password` (기본값)

**보안 위험도:** CRITICAL
**배포 차단 요소:** YES

### 🔴 Priority 1: 빌드/컴파일 실패 (즉시 해결 필요)
**현재 상태:**
- 패키지 구조 불일치: `com.jbreport.platform` vs `com.jeonbuk.report`
- 엔티티 클래스 import 실패 (54개 컴파일 오류)
- 애플리케이션 실행 불가

**영향도:** CRITICAL
**배포 차단 요소:** YES

### 🔴 Priority 1: 핵심 기능 미완성 (즉시 해결 필요)
**현재 상태:**
- JSON 파싱 로직: "TODO" 주석으로만 존재
- OAuth 소셜 로그인: placeholder 구현
- AI 분석 결과 처리: 기본 fallback만 동작

**기능 영향도:** HIGH
**배포 차단 요소:** YES

## 3. 해결 계획 및 구현 요구사항

### 📋 Phase 1: 보안 설정 강화 (1-2일)

#### 3.1 환경변수 기반 설정 완성
**목표:** 모든 민감 정보를 환경변수로 관리
**구현 요구사항:**
1. **OAuth 설정 완성**
   ```yaml
   # application-prod.yml
   spring:
     security:
       oauth2:
         client:
           registration:
             google:
               client-id: ${GOOGLE_CLIENT_ID}
               client-secret: ${GOOGLE_CLIENT_SECRET}
             kakao:
               client-id: ${KAKAO_CLIENT_ID}
               client-secret: ${KAKAO_CLIENT_SECRET}
   ```

2. **API 키 보안 설정**
   ```yaml
   app:
     roboflow:
       api-key: ${ROBOFLOW_API_KEY}
       workspace-url: ${ROBOFLOW_WORKSPACE_URL}
     openrouter:
       api:
         key: ${OPENROUTER_API_KEY}
   ```

3. **JWT 및 DB 보안 설정**
   ```yaml
   app:
     jwt:
       secret: ${JWT_SECRET} # 최소 256bit 랜덤 키
   spring:
     datasource:
       password: ${DB_PASSWORD}
   ```

#### 3.2 설정 검증 로직 구현
**구현 요구사항:**
```java
@Component
@ConfigurationPropertiesBinding
public class ProductionConfigValidator {
    @EventListener
    public void validateOnStartup(ApplicationReadyEvent event) {
        // 필수 환경변수 존재 여부 검증
        // placeholder 값 사용 여부 검증
        // 보안 요구사항 준수 여부 검증
    }
}
```

### 📋 Phase 2: 빌드 시스템 수정 (1일)

#### 2.1 패키지 구조 통일
**목표:** 모든 Java 클래스의 패키지 구조를 `com.jeonbuk.report`로 통일
**구현 요구사항:**
1. `com.jbreport.platform` → `com.jeonbuk.report` 일괄 변경
2. import 문 수정
3. 컴파일 오류 제거

#### 2.2 의존성 검증
**구현 요구사항:**
1. 누락된 의존성 추가
2. 버전 충돌 해결
3. 테스트 환경 분리

### 📋 Phase 3: 핵심 기능 완성 (1주)

#### 3.1 JSON 파싱 로직 완전 구현
**목표:** AI API 응답의 안정적인 파싱
**구현 요구사항:**
```java
@Service
public class JsonParsingService {
    public RoboflowDto parseRoboflowResponse(String jsonResponse) {
        // 정교한 JSON 파싱 로직 구현
        // 스키마 검증
        // 오류 처리 및 fallback
    }
    
    public OpenRouterDto parseOpenRouterResponse(String jsonResponse) {
        // OpenRouter 응답 파싱
        // 중첩 JSON 구조 처리
        // 예외 상황 대응
    }
}
```

#### 3.2 OAuth 소셜 로그인 완성
**구현 요구사항:**
1. **Flutter 앱 OAuth 패키지 설치**
   ```yaml
   dependencies:
     google_sign_in: ^6.1.5
     kakao_flutter_sdk: ^1.7.0
   ```

2. **AuthService 실제 구현**
   ```dart
   class AuthService {
     Future<User?> loginWithGoogle() async {
       // Google Sign-In SDK 실제 호출
       // 토큰 검증 및 사용자 정보 동기화
     }
     
     Future<User?> loginWithKakao() async {
       // Kakao SDK 실제 호출
       // 사용자 정보 매핑
     }
   }
   ```

#### 3.3 파일 업로드 핵심 기능
**구현 요구사항:**
```java
@Service
public class FileService {
    public String uploadFile(MultipartFile file) {
        // 실제 파일 저장 로직
        // 썸네일 생성 (이미지의 경우)
        // 메타데이터 DB 저장
        return filePath;
    }
    
    public void generateThumbnail(String originalPath) {
        // ImageIO 또는 외부 라이브러리 사용
        // 썸네일 생성 및 저장
    }
}
```

## 4. 검증 및 테스트 계획

### 4.1 빌드 검증
```bash
# 컴파일 성공 확인
./gradlew clean build

# 테스트 실행
./gradlew test

# Docker 이미지 빌드
docker build -t jeonbuk-report-api .
```

### 4.2 보안 검증
```bash
# 환경변수 설정 확인
docker run --env-file .env.prod jeonbuk-report-api

# placeholder 값 검증
grep -r "your-.*-" src/main/resources/
```

### 4.3 기능 검증
- OAuth 로그인 플로우 테스트
- 파일 업로드/다운로드 테스트
- AI 분석 API 호출 테스트
- JSON 파싱 정확성 테스트

## 5. 배포 준비 체크리스트

### ✅ 보안 요구사항
- [ ] 모든 민감 정보가 환경변수로 관리됨
- [ ] placeholder 값 완전 제거
- [ ] JWT Secret 256bit 랜덤 키 사용
- [ ] HTTPS 적용 (Nginx 설정)

### ✅ 빌드 요구사항
- [ ] 컴파일 오류 0개
- [ ] 테스트 통과율 90% 이상
- [ ] Docker 이미지 빌드 성공
- [ ] 의존성 보안 취약점 0개

### ✅ 기능 요구사항
- [ ] OAuth 로그인 정상 작동
- [ ] 파일 업로드/다운로드 정상 작동
- [ ] AI API 연동 정상 작동
- [ ] 데이터베이스 연결 정상

### ✅ 인프라 요구사항
- [ ] PostgreSQL 운영 환경 설정
- [ ] Redis 클러스터 설정
- [ ] Kafka 클러스터 설정
- [ ] 로드 밸런서 설정

## 6. 위험 요소 및 대응 방안

### 6.1 외부 API 의존성
**위험:** Roboflow/OpenRouter API 장애
**대응:** Circuit Breaker 패턴 구현, fallback 응답 제공

### 6.2 데이터베이스 마이그레이션
**위험:** 스키마 변경으로 인한 데이터 손실
**대응:** 백업 및 롤백 계획 수립

### 6.3 OAuth 인증 실패
**위험:** 소셜 로그인 서비스 장애
**대응:** 이메일/비밀번호 로그인 대체 수단 제공

## 7. 성공 기준

### 7.1 기술적 성공 기준
- 애플리케이션 정상 시작 (30초 이내)
- API 응답 시간 < 2초 (95% percentile)
- 시스템 가용성 > 99.5%
- 보안 취약점 0개

### 7.2 기능적 성공 기준
- 사용자 회원가입/로그인 성공률 > 95%
- 파일 업로드 성공률 > 98%
- AI 분석 결과 정확도 > 85%

## 8. 일정 및 마일스톤

**Day 1-2:** 보안 설정 강화 및 환경변수 완성
**Day 3:** 빌드 시스템 수정 및 컴파일 오류 해결
**Day 4-7:** 핵심 기능 완성 (JSON 파싱, OAuth, 파일 업로드)
**Day 8-10:** 통합 테스트 및 검증
**Day 11-12:** 운영 환경 배포 및 모니터링 설정

**총 예상 기간: 12일 (약 2.5주)**

## 9. 참고사항

- 이 PRD는 최소한의 Production 배포 가능 상태 달성을 목표로 함
- 고급 기능 (성능 최적화, 고가용성 등)은 배포 후 단계적 개선
- 보안 최우선 원칙으로 모든 설정 검토 필요