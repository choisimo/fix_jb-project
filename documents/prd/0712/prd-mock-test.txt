# 테스트/mock/임시 객체 PRD

## 1. 목적 및 개요
- 서비스/컨트롤러/외부 연동 등 테스트를 위한 mock/stub/임시 객체 사용
- 실제 구현 전 임시 코드/임시 반환 등 활용

## 2. 상세 요구사항
- 테스트 코드 내 mock/stub/임시 객체 사용 최소화
- 실제 서비스 코드에서 임시 반환/임시 객체 제거
- 테스트 자동화/실제 환경과 유사한 테스트 환경 구축

## 3. 동작 플로우
1. 테스트 실행 시 mock/stub 객체로 의존성 대체
2. 실제 구현 완료 후 mock/stub 제거

## 4. 예외/에러 처리
- mock/stub로 인한 실제 동작 불일치, 테스트 누락 등

## 5. 구현 상태 및 미구현/임시 구현 현황
### ✅ 구현 완료
- 기본적인 테스트 인프라 구축
- MockMvc 기반 컨트롤러 테스트 프레임워크

### ❌ 미구현/임시 구현
- **TestConfig**: KafkaTemplate, RedisTemplate을 Mock으로 대체 중
- **DevConfig**: 개발 환경에서도 Mock 사용 중
- **ReportControllerTest**: MockMvc 기반 테스트로 실제 비즈니스 로직 검증 부족
- **UserControllerTest**: 과도한 Mock 의존성
- **RoboflowApiClient**: 실패 시 Mock fallback 로직 사용
- 통합 테스트 환경에서 실제 외부 서비스 연동 미완성
- 테스트 데이터 관리 및 격리 메커니즘 미완성
- 실제 서비스 로직 기반 테스트 시나리오 부족

## 6. 참고/비고
- 테스트 신뢰성 확보를 위해 실제 환경과 최대한 유사하게 유지 필요
- Mock 사용을 최소화하고 실제 구현체 기반 통합 테스트 강화 필요
