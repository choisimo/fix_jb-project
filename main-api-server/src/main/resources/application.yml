spring:
  application:
    name: jeonbuk-report-platform
  profiles:
    active: ${SPRING_PROFILES_ACTIVE:dev}
  
  # Database Configuration
  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}
    driver-class-name: org.postgresql.Driver
    
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: none
    show-sql: ${SHOW_SQL:false}
    properties:
      hibernate:
        dialect: org.hibernate.spatial.dialect.postgis.PostgisPG95Dialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          time_zone: Asia/Seoul
  
  # Redis Configuration
  data:
    redis:
      host: ${REDIS_HOST}
      port: 6379
      password: ${REDIS_PASSWORD}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  # Kafka Configuration
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        enable.idempotence: true
        acks: all
        retries: 3
    consumer:
      group-id: report-service-group
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        auto.offset.reset: earliest
  
  # Email Configuration (SMTP)
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
          connection-timeout: 10000
          timeout: 10000
  
  # File Upload Configuration
  servlet:
    multipart:
      max-file-size: 50MB
      max-request-size: 200MB
      enabled: true
  
  # Security Configuration
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: profile,email
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: profile_nickname,account_email
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

# Application Configuration
app:
  jwt:
    secret: ${JWT_SECRET}
    expiration: 86400000 # 24 hours
    refresh-expiration: 604800000 # 7 days
  
  file:
    upload-dir: ${FILE_STORAGE_PATH}
    base-url: ${FILE_BASE_URL}
    max-size: 50MB
    allowed-types: image/jpeg,image/png,image/gif,video/mp4,video/avi
  
  roboflow:
    api-key: ${ROBOFLOW_API_KEY}
    model-id: ${ROBOFLOW_MODEL_ID}
  
  openrouter:
    api:
      key: ${OPENROUTER_API_KEY}
      base-url: ${OPENROUTER_BASE_URL:https://openrouter.ai/api/v1}
      model: ${OPENROUTER_MODEL:qwen/qwen2.5-vl-72b-instruct:free}
  
  # 인증 관련 설정
  verification:
    sms:
      api-key: ${SMS_API_KEY:}
      sender: ${SMS_SENDER:010-0000-0000}
      provider: ${SMS_PROVIDER:aligo} # aligo, aws-sns, twilio
    email:
      from: ${EMAIL_FROM:noreply@jeonbuk-report.kr}
      provider: ${EMAIL_PROVIDER:smtp} # smtp, aws-ses, sendgrid
    code:
      length: 6
      expiry: 300 # 5분
  
  # NICE 실명인증 설정
  nice:
    client-id: ${NICE_CLIENT_ID:}
    client-secret: ${NICE_CLIENT_SECRET:}
    return-url: ${NICE_RETURN_URL:http://localhost:8080/api/auth/nice/callback}
    api-url: ${NICE_API_URL:https://nice.checkplus.co.kr}
  
  # KCB 실명인증 설정 (선택적)
  kcb:
    site-code: ${KCB_SITE_CODE:}
    site-password: ${KCB_SITE_PASSWORD:}
    return-url: ${KCB_RETURN_URL:http://localhost:8080/api/auth/kcb/callback}
    api-url: ${KCB_API_URL:https://www.kcbcard.co.kr}
  
  # Pass 인증 설정 (선택적)
  pass:
    app-key: ${PASS_APP_KEY:}
    secret-key: ${PASS_SECRET_KEY:}
    return-url: ${PASS_RETURN_URL:http://localhost:8080/api/auth/pass/callback}
    api-url: ${PASS_API_URL:https://developers.sktelecom.com}
  
  kafka:
    topics:
      image-requests: image_requests
      analysis-results: analysis_results
      notifications: notifications

  # CORS Configuration
  cors:
    allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:*,http://10.0.2.2:*,http://192.168.*:*,http://127.0.0.1:*}
    allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,PATCH,OPTIONS}
    allowed-headers: ${CORS_ALLOWED_HEADERS:Authorization,Content-Type,X-Requested-With,Accept,Origin,Access-Control-Request-Method,Access-Control-Request-Headers}
    exposed-headers: ${CORS_EXPOSED_HEADERS:Authorization,X-Total-Count}
    allow-credentials: ${CORS_ALLOW_CREDENTIALS:true}
    max-age: ${CORS_MAX_AGE:3600}
    
  # Development Configuration
  dev:
    kafka:
      enabled: ${DEV_KAFKA_ENABLED:true}
    redis:
      enabled: ${DEV_REDIS_ENABLED:true}

# Server Configuration
server:
  port: 8080
  address: 0.0.0.0
  
# Logging Configuration
logging:
  level:
    com.jeonbuk.report: ${LOG_LEVEL:INFO}
    org.springframework.security: DEBUG
    org.hibernate.SQL: ${SQL_LOG_LEVEL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${SQL_PARAM_LOG_LEVEL:WARN}
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
  file:
    name: logs/application.log

# Management Configuration (Actuator)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when-authorized
  info:
    env:
      enabled: true

# SpringDoc (Swagger) Configuration
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
